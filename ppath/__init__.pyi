import contextlib
import pathlib
import tempfile
from os import PathLike
from typing import Any
from typing import AnyStr
from typing import IO
from typing import Iterable
from typing import Literal
from typing import MutableMapping
from typing import MutableSequence
from typing import Optional
from typing import Sequence
from typing import Sized
from typing import Type
from typing import Union

__all__: tuple[str, ...] = ...

AnyPath = Union[PathLike, AnyStr, IO[AnyStr]]


class Path(pathlib.Path, pathlib.PurePosixPath):
    def __new__(cls: Type[Path], *args: AnyPath, **kwargs: Any) -> Path: ...
    def __contains__(self, value: Iterable) -> bool: ...
    def __eq__(self, other: Path) -> bool: ...
    def __hash__(self) -> int: ...
    def __iter__(self) -> Iterable[str]: ...
    def __lt__(self, other: Path) -> bool: ...
    def __le__(self, other: Path) -> bool: ...
    def __gt__(self, other: Path) -> bool: ...
    def __ge__(self, other: Path) -> bool: ...
    @property
    def _cparts(self) -> list[str]: ...
    @property
    def _parts(self) -> list[str]: ...
    def access(self, os_mode: int = ..., *, dir_fd: Optional[int] = ..., effective_ids: bool = ...,
               follow_symlinks: bool = ...) -> bool: ...
    def append_text(self, text: str, encoding: str = ..., errors = ...) -> str: ...
    @contextlib.contextmanager
    def cd(self) -> Path: ...
    def chdir(self) -> Path: ...
    def checksum(self, algorithm: Literal['md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512'],
                 block_size: int = ...) -> str: ...
    def directory(self) -> Path: ...
    @classmethod
    def expandvars(cls, path: Optional[str] = None) -> Path: ...
    def has(self, value: Iterable) -> bool: ...

    @property
    def text(self) -> str: ...
    @classmethod
    @contextlib.contextmanager
    def tempdir(cls, suffix: Optional[AnyStr] = ..., prefix: Optional[AnyStr] = ...,
               directory: Optional[AnyPath] = ...) -> Path: ...
    @classmethod
    @contextlib.contextmanager
    def tempfile(
            cls,
            mode: Literal["r", "w", "a", "x", "r+", "w+", "a+", "x+", "rt", "wt", "at", "xt", "r+t",
                                   "w+t", "a+t", "x+t"] = ...,
            buffering: int = ...,
            encoding: Optional[str] = ...,
            newline: Optional[str] = ...,
            suffix: Optional[AnyStr] = ...,
            prefix: Optional[AnyStr] = ...,
            directory: Optional[AnyPath] = ...,
            delete: bool = ...,
            *,
            errors: Optional[str] = ...
    ) -> TemporaryFileType[str]: ...

class TemporaryFileType(type(tempfile.NamedTemporaryFile())): path: Path = None

def toiter(obj: Any, split: str = ...) -> Union[Sized, MutableMapping, Sequence, MutableSequence]: ...
